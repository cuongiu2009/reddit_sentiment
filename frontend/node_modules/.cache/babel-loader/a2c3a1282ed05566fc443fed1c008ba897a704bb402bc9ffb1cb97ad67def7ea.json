{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api/v1';\nconst api = {\n  async createJob(topic, sources, time_range, sort) {\n    // Add sort parameter\n    const response = await fetch(`${API_BASE_URL}/jobs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        topic,\n        sources,\n        time_range,\n        sort\n      }) // Include sort in the body\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create job');\n    }\n    return response.json();\n  },\n  async getJobStatus(jobId) {\n    const response = await fetch(`${API_BASE_URL}/jobs/${jobId}`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch job status');\n    }\n    return response.json();\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","createJob","topic","sources","time_range","sort","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","getJobStatus","jobId"],"sources":["C:/Users/Lenovo/Desktop/Code/Python/clone from gpt/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api/v1';\n\nconst api = {\n  async createJob(topic, sources, time_range, sort) { // Add sort parameter\n    const response = await fetch(`${API_BASE_URL}/jobs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ topic, sources, time_range, sort }), // Include sort in the body\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create job');\n    }\n    return response.json();\n  },\n\n  async getJobStatus(jobId) {\n    const response = await fetch(`${API_BASE_URL}/jobs/${jobId}`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch job status');\n    }\n    return response.json();\n  },\n};\n\nexport default api;"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,8BAA8B;AAEzF,MAAMC,GAAG,GAAG;EACV,MAAMC,SAASA,CAACC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAEC,IAAI,EAAE;IAAE;IAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,OAAO,EAAE;MACnDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,KAAK;QAAEC,OAAO;QAAEC,UAAU;QAAEC;MAAK,CAAC,CAAC,CAAE;IAC9D,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,sBAAsB,CAAC;IAC9D;IACA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMG,YAAYA,CAACC,KAAK,EAAE;IACxB,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,YAAY,SAASuB,KAAK,EAAE,CAAC;IAC7D,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,4BAA4B,CAAC;IACpE;IACA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB;AACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}